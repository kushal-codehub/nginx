name: Deploy nginx to ec2
on:
  workflow_dispatch
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: clone git repo
        uses: actions/checkout@v4
        
      - name: configuring AWS credentials 
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
          
      - name: copying nginx.conf to s3 bucket
        run: aws s3 cp nginx.conf s3://homework-1212/nginx/
        
      - name: Deploy to Ec2 using ssm
        run: |
          aws ssm send-command \
          --instance-ids "${{secrets.EC2_INSTANCE_ID}}" \
          --document-name "AWS-RunShellScript" \
          --comment "deploying default.conf" \
          --parameters 'commands=[
            "echo Starting nginx configuration deployment...",
            "sudo mkdir -p /etc/nginx/backups",
            "sudo cp /etc/nginx/sites-available/default /etc/nginx/backups/default_backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || echo No existing config to backup",
            "aws s3 cp s3://homework-1212/nginx/nginx.conf /tmp/nginx.conf",
            "sudo cp /tmp/nginx.conf /etc/nginx/sites-available/default",
            "echo Testing nginx configuration...",
            "if sudo nginx -t; then echo Config test passed; else echo Config test failed && exit 1; fi",
            "echo Reloading nginx...",
            "if sudo systemctl reload nginx; then echo Nginx reloaded successfully; else echo Nginx reload failed && exit 1; fi",
            "rm /tmp/nginx.conf",
            "echo Successfully updated nginx configuration!"
          ]'
          
      - name: Check deployment status
        run: |
          # Wait a moment for the command to execute
          sleep 10
          
          # Get the command execution status
          COMMAND_ID=$(aws ssm list-commands \
            --instance-id "${{secrets.EC2_INSTANCE_ID}}" \
            --max-items 1 \
            --query 'Commands[0].CommandId' \
            --output text)
          
          echo "Command ID: $COMMAND_ID"
          
          # Check command status
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{secrets.EC2_INSTANCE_ID}}" \
            --query '[Status,ResponseCode,StandardOutputContent,StandardErrorContent]' \
            --output table
